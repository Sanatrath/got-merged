<!DOCTYPE html>
<html>
<head>
  <title>Game of Thrones - Season 2 Episode 4</title>

  <link href="css/video-js.css" rel="stylesheet" type="text/css">
  <script src="js/video.js"></script>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
  <script src="http://localhost:11000/socket.io/socket.io.js"></script>
  <!-- Unless using the CDN hosted version, update the URL to the Flash SWF -->
  <script>
    videojs.options.flash.swf = "video-js.swf";
  </script>


</head>
<body>

  <video id="videoPlayer" class="video-js vjs-default-skin" controls preload="auto" width="1024" height="576" data-setup="{}">
    <source src="video/game.of.thrones.s02e04.mp4" type='video/mp4' />
  </video>

<script>
	var socket = io.connect('http://localhost:11000');
	
	var triggerTimes = [12,85,90,130,132,170,204,222,238,303,439,448,465,584,663,695,725,844,900,908];
	var sceneTimes = [12,130,303,439,663,844];
<<<<<<< HEAD
	var dialogueTimes = [12,130,303,439,663,844];
=======
	var dialogTimes = [15,17,17.5,22.5,23,27,30,31,32,33,56,68,69,70,71,71.5,72,72.5,73,75,76,77,108,116,116.5,118,119,125];
>>>>>>> 01d223077a6cc72ef7d875f1728a1233ca545fb9
	
	videojs("videoPlayer").ready(function(){
		socket.emit('videoStart', {message: "The video has started"}); //send to client that the video has started
		var myPlayer = this;
		sceneTimes.push(myPlayer.duration()); //add the end timestamp as the last value in the sceneTimes array
		myPlayer.dimensions($(document).width()-20, $(document).height()-20);
		myPlayer.play();
		//myPlayer.requestFullScreen();
		var currTime, lastEvent=0, lastScene = 0, lastDialog=0, match, activeScene, activeDialog;
		myPlayer.on('timeupdate', function(){
			currTime = myPlayer.currentTime();
			
			for (var i = 0; i < triggerTimes.length; i++) {
			   if (currTime >= triggerTimes[i] && currTime <= triggerTimes[i] + 0.5){ 
					match = triggerTimes[i];
					if (match != lastEvent){
						if ($.inArray( match, sceneTimes) != -1){
							console.log("the scene type is a new scene");
							lastScene = match;
						}
						lastEvent  = triggerTimes[i];
						socket.emit('eventBroadcast', {eventIndex: i});
					}
				}
			}
			
			for (var i = 0; i < dialogTimes.length; i++) {
			   if (currTime >= dialogTimes[i] && currTime <= dialogTimes[i] + 0.5){ 
					activeDialog = dialogTimes[i];
					if (activeDialog != lastDialog){
						lastDialog  = dialogTimes[i];
						socket.emit('dialogBroadcast', {dialogIndex: i});
					}
				}
			}

			for (var i = 0; i < sceneTimes.length -1; i++) { //-1 to not loop of the end-of-video timestamp
				if (currTime > sceneTimes[i] && currTime < sceneTimes[i+1]){
					activeScene = sceneTimes[i];
					if (activeScene != lastScene){
						console.log("triggered change of scene");
						lastScene = activeScene;
						socket.emit('eventBroadcast', {eventIndex: triggerTimes.indexOf(activeScene)});
					}
				}
			}
		});
		
		socket.on('changeSceneOnPlayer', function  (data) {
			myPlayer.currentTime(sceneTimes[data.index]);
		});
	});
</script>  
</body>
</html>
